generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int     @id @default(autoincrement())
  telegramId String? @unique
  data       Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)

  phone String? @unique

  receipts          Receipt[]
  shiftReports      ShiftReport[]
  userOrganizations UserOrganization[]

  @@index([telegramId])
  @@index([active])
  @@index([phone])
}

model Organization {
  id                Int                @id @default(autoincrement())
  name              String
  description       String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  active            Boolean            @default(true)
  settings          Json?
  products          Product[]
  productCategories ProductCategory[]
  receipts          Receipt[]
  shiftReports      ShiftReport[]
  userOrganizations UserOrganization[]
}

model UserOrganization {
  id             Int          @id @default(autoincrement())
  userId         Int
  organizationId Int
  role           Role
  isOwner        Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
  @@index([userId, organizationId])
}

model Product {
  id              Int              @id @default(autoincrement())
  name            String
  quantity        Decimal
  minThreshold    Decimal
  unit            String?          @default("ะตะด")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  active          Boolean          @default(true)
  organizationId  Int
  categoryId      Int?
  productCategory ProductCategory? @relation(fields: [categoryId], references: [id])
  organization    Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  receipts        Receipt[]

  @@unique([organizationId, name])
  @@index([organizationId])
  @@index([categoryId])
}

model Receipt {
  id             Int          @id @default(autoincrement())
  operatorId     Int?
  receipts       Json
  createdAt      DateTime     @default(now())
  productId      Int?
  organizationId Int
  operatorData   Json?
  operator       User?        @relation(fields: [operatorId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  Product        Product?     @relation(fields: [productId], references: [id])

  @@index([organizationId])
}

model ShiftReport {
  id             Int          @id @default(autoincrement())
  userId         Int
  consumptions   Json
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  operatorId     Int?
  organizationId Int
  operatorData   Json?
  operator       User?        @relation(fields: [operatorId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
}

model ProductCategory {
  id             Int          @id @default(autoincrement())
  name           String
  description    String?
  color          String?
  icon           String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  active         Boolean      @default(true)
  organizationId Int
  products       Product[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, name])
  @@index([organizationId])
}

enum Role {
  IT
  OWNER
  GUEST
  OPERATOR
  ADMIN
  BLOCKED
}
