generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  IT
  OWNER
  GUEST
  OPERATOR
  ADMIN
  BLOCKED
}

model User {
  id         Int    @id @default(autoincrement())
  telegramId String @unique

  data         Json?
  receipts     Receipt[]
  shiftReports ShiftReport[] // факт подтверждения смены
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  active            Boolean         @default(true)
  accessRequests    AccessRequest[]
  processedRequests AccessRequest[] @relation("ProcessedBy") // Заявки, обработанные этим пользователем

  // Связи с организациями
  userOrganizations UserOrganization[]

  // Связь с разрешенным телефоном
  allowedPhone AllowedPhone?
}

model Organization {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  active      Boolean  @default(true)
  settings    Json?

  // Связи
  userOrganizations UserOrganization[]
  products          Product[]
  receipts          Receipt[]
  shiftReports      ShiftReport[]
  allowedPhones     AllowedPhoneOrganization[]
}

model UserOrganization {
  id             Int      @id @default(autoincrement())
  userId         Int
  organizationId Int
  role           Role // Роль пользователя в конкретной организации
  isOwner        Boolean  @default(false) // Владелец организации
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Связи
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

model Product {
  id           Int       @id @default(autoincrement())
  name         String
  quantity     Decimal
  minThreshold Decimal
  unit         String?   @default("ед")
  category     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  receipts     Receipt[]
  active       Boolean   @default(true)

  // Связь с организацией
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, name]) // Уникальное имя в рамках организации
}

model Receipt {
  id         Int      @id @default(autoincrement())
  operator   User?    @relation(fields: [operatorId], references: [id])
  operatorId Int?
  receipts   Json // [{ productId: number, quantity: number }]
  createdAt  DateTime @default(now())
  Product    Product? @relation(fields: [productId], references: [id])
  productId  Int?

  // Связь с организацией
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model ShiftReport {
  id           Int      @id @default(autoincrement())
  userId       Int
  consumptions Json // [ { productId: number, consumed: number }, … ]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  User         User     @relation(fields: [userId], references: [id])

  // Связь с организацией
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

enum AccessRequestStatus {
  PENDING
  APPROVED
  DECLINED
}

model AccessRequest {
  id            Int                 @id @default(autoincrement())
  user          User                @relation(fields: [userId], references: [id])
  userId        Int
  status        AccessRequestStatus @default(PENDING)
  message       String? // Дополнительное сообщение от пользователя
  adminNote     String? // Заметка администратора
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  processedAt   DateTime? // Когда заявка была обработана
  processedBy   User?               @relation("ProcessedBy", fields: [processedById], references: [id])
  processedById Int?
}

model AllowedPhone {
  id        Int      @id @default(autoincrement())
  phone     String   @unique // В формате +79991234567
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Связь с пользователем
  userId Int?  @unique
  user   User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Связь many-to-many с организациями
  organizations AllowedPhoneOrganization[]
}

model AllowedPhoneOrganization {
  id             Int      @id @default(autoincrement())
  allowedPhoneId Int
  organizationId Int
  createdAt      DateTime @default(now())

  // Связи
  allowedPhone AllowedPhone @relation(fields: [allowedPhoneId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([allowedPhoneId, organizationId])
}
