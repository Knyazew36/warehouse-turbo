import { Injectable, NotFoundException, BadRequestException } from '@nestjs/common'
import { PrismaService } from 'nestjs-prisma'
import { Organization, UserOrganization, Role } from '@prisma/client'
import { CreateOrganizationDto } from './dto/create-organization.dto'
import { UpdateOrganizationDto } from './dto/update-organization.dto'
import { AddUserToOrganizationDto } from './dto/add-user-to-organization.dto'

@Injectable()
export class OrganizationService {
  constructor(private readonly prisma: PrismaService) {
    console.log('üü¢ OrganizationService —Å–æ–∑–¥–∞–Ω', new Date().toISOString())
  }

  async create(
    createOrganizationDto: CreateOrganizationDto,
    creatorUserId: number
  ): Promise<Organization> {
    return await this.prisma.$transaction(async prisma => {
      // –°–æ–∑–¥–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
      const organization = await prisma.organization.create({
        data: {
          name: createOrganizationDto.name,
          description: createOrganizationDto.description
        }
      })

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
      await prisma.userOrganization.create({
        data: {
          userId: creatorUserId,
          organizationId: organization.id,
          role: Role.OWNER,
          isOwner: true
        }
      })

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
      if (createOrganizationDto.allowedPhones && createOrganizationDto.allowedPhones.length > 0) {
        for (const phone of createOrganizationDto.allowedPhones) {
          // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω
          const allowedPhone = await prisma.allowedPhone.upsert({
            where: { phone },
            update: {},
            create: {
              phone,
              comment: ''
            }
          })

          // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π
          await prisma.allowedPhoneOrganization.create({
            data: {
              allowedPhoneId: allowedPhone.id,
              organizationId: organization.id
            }
          })
        }
      }

      return organization
    })
  }

  async findOne(id: number): Promise<Organization> {
    const organization = await this.prisma.organization.findUnique({
      where: { id },
      include: {
        userOrganizations: {
          include: {
            user: {
              select: {
                id: true,
                telegramId: true,
                data: true,
                active: true
              }
            }
          }
        },
        allowedPhones: {
          include: {
            allowedPhone: true
          }
        }
      }
    })

    if (!organization) {
      throw new NotFoundException(`–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
    }

    return organization
  }

  async update(id: number, updateOrganizationDto: UpdateOrganizationDto): Promise<Organization> {
    const organization = await this.findOne(id)

    // –ò–∑–≤–ª–µ–∫–∞–µ–º allowedPhones –∏–∑ DTO, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –ø–æ–ª–µ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –º–æ–¥–µ–ª–∏
    const { allowedPhones, ...updateData } = updateOrganizationDto

    return this.prisma.organization.update({
      where: { id },
      data: updateData
    })
  }

  async remove(id: number): Promise<Organization> {
    const organization = await this.findOne(id)
    if (!organization) {
      throw new NotFoundException(`–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
    }

    // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é
    return this.prisma.organization.delete({
      where: { id },
      include: {
        userOrganizations: true
      }
    })
  }

  async addUserToOrganization(
    organizationId: number,
    addUserDto: AddUserToOrganizationDto
  ): Promise<UserOrganization> {
    const organization = await this.findOne(organizationId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const user = await this.prisma.user.findUnique({
      where: { id: addUserDto.userId }
    })

    if (!user) {
      throw new NotFoundException(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${addUserDto.userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —ç—Ç—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
    const existingUserOrg = await this.prisma.userOrganization.findUnique({
      where: {
        userId_organizationId: {
          userId: addUserDto.userId,
          organizationId: organizationId
        }
      }
    })

    if (existingUserOrg) {
      throw new BadRequestException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é')
    }

    return this.prisma.userOrganization.create({
      data: {
        userId: addUserDto.userId,
        organizationId: organizationId,
        role: addUserDto.role,
        isOwner: addUserDto.isOwner || false
      },
      include: {
        user: {
          select: {
            id: true,
            telegramId: true,
            data: true,
            active: true
          }
        }
      }
    })
  }

  async removeUserFromOrganization(organizationId: number, userId: number): Promise<void> {
    const userOrg = await this.prisma.userOrganization.findUnique({
      where: {
        userId_organizationId: {
          userId: userId,
          organizationId: organizationId
        }
      }
    })

    if (!userOrg) {
      throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
    }

    // –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    if (userOrg.isOwner) {
      throw new BadRequestException('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ allowedPhone
    const user = await this.prisma.user.findUnique({
      where: { id: userId },
      include: { allowedPhone: true }
    })

    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π
    await this.prisma.userOrganization.delete({
      where: {
        userId_organizationId: {
          userId: userId,
          organizationId: organizationId
        }
      }
    })

    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å allowedPhone, —É–¥–∞–ª—è–µ–º —Å–≤—è–∑—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π
    if (user?.allowedPhone) {
      await this.prisma.allowedPhoneOrganization.deleteMany({
        where: {
          allowedPhoneId: user.allowedPhone.id,
          organizationId: organizationId
        }
      })
    }
  }

  async getUserOrganizations(userId: number): Promise<UserOrganization[]> {
    return this.prisma.userOrganization.findMany({
      where: { userId },
      include: {
        organization: true
      },
      orderBy: { createdAt: 'desc' }
    })
  }

  async getOrganizationUsers(organizationId: number): Promise<UserOrganization[]> {
    return this.prisma.userOrganization.findMany({
      where: { organizationId },
      include: {
        user: {
          select: {
            id: true,
            telegramId: true,
            data: true,
            active: true
          }
        }
      },
      orderBy: { createdAt: 'desc' }
    })
  }

  async updateUserRole(
    organizationId: number,
    userId: number,
    role: Role,
    isOwner?: boolean
  ): Promise<UserOrganization> {
    const userOrg = await this.prisma.userOrganization.findUnique({
      where: {
        userId_organizationId: {
          userId: userId,
          organizationId: organizationId
        }
      }
    })

    if (!userOrg) {
      throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
    }

    return this.prisma.userOrganization.update({
      where: {
        userId_organizationId: {
          userId: userId,
          organizationId: organizationId
        }
      },
      data: {
        role,
        isOwner: isOwner !== undefined ? isOwner : userOrg.isOwner
      },
      include: {
        user: {
          select: {
            id: true,
            telegramId: true,
            data: true,
            active: true
          }
        }
      }
    })
  }

  async getAvailableOrganizations(userId: number): Promise<{
    myOrganizations: UserOrganization[]
    invitedOrganizations: Organization[]
  }> {
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const myOrganizations = await this.getUserOrganizations(userId)

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
    const user = await this.prisma.user.findUnique({
      where: { id: userId },
      include: {
        allowedPhone: true
      }
    })

    if (!user) {
      throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }

    // –ü–æ–ª—É—á–∞–µ–º ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç
    const userOrganizationIds = myOrganizations.map(org => org.organizationId)

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –≥–¥–µ –µ—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –æ–Ω –µ—â–µ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç
    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
    let invitedOrganizations: Organization[] = []

    if (user.allowedPhone) {
      invitedOrganizations = await this.prisma.organization.findMany({
        where: {
          active: true,

          allowedPhones: {
            some: {
              allowedPhone: {
                phone: user.allowedPhone.phone
              }
            }
          },
          id: {
            notIn: userOrganizationIds
          }
        },
        include: {
          allowedPhones: {
            include: {
              allowedPhone: true
            }
          }
        },
        orderBy: { createdAt: 'desc' }
      })
    }

    return {
      myOrganizations,
      invitedOrganizations
    }
  }

  async joinOrganization(organizationId: number, userId: number): Promise<UserOrganization> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
    const organization = await this.findOne(organizationId)

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
    const user = await this.prisma.user.findUnique({
      where: { id: userId },
      include: {
        allowedPhone: true
      }
    })

    if (!user) {
      throw new NotFoundException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    let hasAccess = false

    if (user.allowedPhone) {
      hasAccess =
        (await this.prisma.allowedPhoneOrganization.findFirst({
          where: {
            allowedPhone: {
              phone: user.allowedPhone.phone
            },
            organizationId
          }
        })) !== null
    }

    if (!user.allowedPhone || !hasAccess) {
      throw new BadRequestException('–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    const existingUserOrg = await this.prisma.userOrganization.findUnique({
      where: {
        userId_organizationId: {
          userId: userId,
          organizationId: organizationId
        }
      }
    })

    if (existingUserOrg) {
      throw new BadRequestException('–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —Å —Ä–æ–ª—å—é OPERATOR –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return this.prisma.userOrganization.create({
      data: {
        userId: userId,
        organizationId: organizationId,
        role: Role.OPERATOR,
        isOwner: false
      },
      include: {
        organization: true
      }
    })
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
   */
  async addAllowedPhone(organizationId: number, phone: string): Promise<Organization> {
    const organization = await this.findOne(organizationId)

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω
    const allowedPhone = await this.prisma.allowedPhone.upsert({
      where: { phone },
      update: {},
      create: {
        phone,
        comment: ''
      }
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
    const existingRelation = await this.prisma.allowedPhoneOrganization.findUnique({
      where: {
        allowedPhoneId_organizationId: {
          allowedPhoneId: allowedPhone.id,
          organizationId
        }
      }
    })

    if (existingRelation) {
      throw new BadRequestException('–≠—Ç–æ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö')
    }

    // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π
    await this.prisma.allowedPhoneOrganization.create({
      data: {
        allowedPhoneId: allowedPhone.id,
        organizationId
      }
    })

    return this.findOne(organizationId)
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  async removeAllowedPhone(organizationId: number, phone: string): Promise<Organization> {
    const organization = await this.findOne(organizationId)

    const allowedPhone = await this.prisma.allowedPhone.findUnique({
      where: { phone }
    })

    if (!allowedPhone) {
      throw new BadRequestException('–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö')
    }

    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π
    const deletedRelation = await this.prisma.allowedPhoneOrganization.deleteMany({
      where: {
        allowedPhoneId: allowedPhone.id,
        organizationId
      }
    })

    if (deletedRelation.count === 0) {
      throw new BadRequestException(
        '–≠—Ç–æ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–ª—è –¥–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'
      )
    }

    // –ï—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –±–æ–ª—å—à–µ –Ω–µ —Å–≤—è–∑–∞–Ω –Ω–∏ —Å –æ–¥–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π, —É–¥–∞–ª—è–µ–º –µ–≥–æ
    const remainingRelations = await this.prisma.allowedPhoneOrganization.count({
      where: { allowedPhoneId: allowedPhone.id }
    })

    if (remainingRelations === 0) {
      await this.prisma.allowedPhone.delete({
        where: { id: allowedPhone.id }
      })
    }

    return this.findOne(organizationId)
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  async getAllowedPhones(
    organizationId: number
  ): Promise<Array<{ id: number; phone: string; comment?: string; createdAt: Date }>> {
    const organization = await this.prisma.organization.findUnique({
      where: { id: organizationId },
      include: {
        allowedPhones: {
          include: {
            allowedPhone: true
          }
        }
      }
    })

    if (!organization) {
      throw new NotFoundException(`–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å ID ${organizationId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
    }

    return organization.allowedPhones.map(relation => ({
      id: relation.allowedPhone.id,
      phone: relation.allowedPhone.phone,
      comment: relation.allowedPhone.comment,
      createdAt: relation.allowedPhone.createdAt
    }))
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  async canUserJoinOrganization(organizationId: number, userId: number): Promise<boolean> {
    const user = await this.prisma.user.findUnique({
      where: { id: userId },
      include: {
        allowedPhone: true
      }
    })

    if (!user || !user.allowedPhone) {
      return false
    }

    const hasAccess = await this.prisma.allowedPhoneOrganization.findFirst({
      where: {
        allowedPhone: {
          phone: user.allowedPhone.phone
        },
        organizationId
      }
    })

    return !!hasAccess
  }
}
