import { Injectable, NotFoundException } from '@nestjs/common';
import { CreateProductDto } from './dto/create-product.dto';
import { UpdateProductDto } from './dto/update-product.dto';
import { PrismaService } from 'nestjs-prisma';
import { Product } from '@prisma/client';
import { BotService } from '../bot/bot.service';
import { NotificationService } from '../bot/notification.service';
import { UserService } from '../user/user.service';
import { Cron } from '@nestjs/schedule';
import { CronExpression } from '@nestjs/schedule';

@Injectable()
export class ProductsService {
  constructor(
    private readonly prisma: PrismaService,
    private readonly botService: BotService,
    private readonly notificationService: NotificationService,
    private readonly userService: UserService,
  ) {
    console.log('üü¢ ProductsService —Å–æ–∑–¥–∞–Ω', new Date().toISOString());
  }

  async create(dto: CreateProductDto) {
    return this.prisma.product.create({ data: dto });
  }

  async findAll(onlyActive = true): Promise<Product[]> {
    return this.prisma.product.findMany({
      where: onlyActive ? { active: true } : undefined,
      orderBy: { name: 'asc' },
    });
  }

  async findOne(id: number) {
    const product = await this.prisma.product.findUnique({ where: { id } });
    if (!product) throw new NotFoundException(`Product #${id} not found`);
    return product;
  }

  async update(id: number, dto: UpdateProductDto) {
    await this.findOne(id);
    return this.prisma.product.update({ where: { id }, data: dto });
  }

  async remove(id: number) {
    await this.findOne(id);
    return this.prisma.product.delete({ where: { id } });
  }

  // @Cron(CronExpression.EVERY_HOUR)
  //FIXME: –Ω–µ –∑–∞–±—ã—Ç—å
  @Cron('0 9 * * *') // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9 —É—Ç—Ä–∞
  // @Cron(CronExpression.EVERY_MINUTE)
  async checkLowStockAndNotify() {
    console.log('üîç checkLowStockAndNotify');
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    const allProducts = await this.prisma.product.findMany();
    const lowStock = allProducts.filter((p) => p.quantity < p.minThreshold);
    if (lowStock.length === 0) return;

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const productList = lowStock
      .map(
        (p) =>
          `‚Ä¢ ${p.name}: ${p.quantity} ${p?.unit || ''} (–º–∏–Ω–∏–º—É–º: ${p.minThreshold} ${p?.unit || ''}.)`,
      )
      .join('\n');
    const message = `‚ö†Ô∏è –ù–∞ —Å–∫–ª–∞–¥–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã:\n\n${productList}`;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ä–æ–º–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    const users = await this.userService.findAll();
    const notifyUsers = users.filter((u) => u.role !== 'OPERATOR' && u.active && u.telegramId);

    for (const user of notifyUsers) {
      console.info('üîç sendMessage', user.telegramId, message);
      try {
        const webappUrl =
          this.notificationService.config.get<string>('WEBAPP_URL') ||
          'https://big-grain-tg.vercel.app';
        await this.notificationService.sendMessage(user.telegramId, message, {
          reply_markup: {
            inline_keyboard: [[{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webappUrl } }]],
          },
        });
      } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}:`, err);
      }
    }
  }
}
