import { Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { PrismaService } from 'nestjs-prisma';
import { NotificationService } from '../bot/notification.service';
import { UserService } from '../user/user.service';
import { Organization, Role } from '@prisma/client';
import { OrganizationSettings } from 'src/organization/types/organization-settings.type';

@Injectable()
export class CronService {
  private readonly logger = new Logger(CronService.name);

  constructor(
    private readonly prisma: PrismaService,
    private readonly notificationService: NotificationService,
    private readonly userService: UserService,
  ) {}

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  @Cron(CronExpression.EVERY_HOUR)
  async checkLowStockAndNotify() {
    this.logger.log('üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ');

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
      const organizations = await this.prisma.organization.findMany({
        where: { active: true },
      });

      for (const organization of organizations) {
        await this.processOrganizationNotifications(organization);
      }
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  private async processOrganizationNotifications(organization: Organization) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
      const notificationSettings = this.getNotificationSettings(
        organization.settings as unknown as OrganizationSettings,
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–π—á–∞—Å
      if (!this.shouldSendNotificationNow(notificationSettings?.notificationTime || '09:00')) {
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
      const lowStockProducts = await this.getLowStockProducts(organization.id);

      if (lowStockProducts.length === 0) {
        this.logger.log(`–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è ${organization.name}: –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º`);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      const usersToNotify = await this.getUsersToNotify(
        organization.id,
        notificationSettings.notificationRoles || [Role.OWNER, Role.ADMIN],
      );

      if (usersToNotify.length === 0) {
        this.logger.log(`–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è ${organization.name}: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await this.sendNotifications(organization, lowStockProducts, usersToNotify);

      this.logger.log(
        `–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è ${organization.name}: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${usersToNotify.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`,
      );
    } catch (error) {
      this.logger.error(
        `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ ${organization.name}:`,
        error,
      );
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ JSON –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  private getNotificationSettings(
    settings: OrganizationSettings,
  ): OrganizationSettings['notifications'] {
    const defaultSettings: OrganizationSettings['notifications'] = {
      notificationTime: '09:00',
      notificationRoles: [Role.OWNER, Role.ADMIN],
    };

    if (!settings || !settings.notifications) {
      return defaultSettings;
    }

    return {
      notificationTime: settings.notifications.notificationTime || defaultSettings.notificationTime,
      notificationRoles:
        settings.notifications.notificationRoles || defaultSettings.notificationRoles,
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–π—á–∞—Å
   */
  private shouldSendNotificationNow(notificationTime: string): boolean {
    const now = new Date();
    const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;

    return currentTime === notificationTime;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  private async getLowStockProducts(organizationId: number) {
    const products = await this.prisma.product.findMany({
      where: {
        organizationId,
        active: true,
      },
    });

    return products.filter((product) => product.quantity < product.minThreshold);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  private async getUsersToNotify(organizationId: number, roles: Role[]) {
    const users = await this.prisma.user.findMany({
      where: {
        active: true,
        telegramId: { not: null },
        userOrganizations: {
          some: {
            organizationId,
            role: { in: roles },
          },
        },
      },
      include: {
        userOrganizations: {
          where: { organizationId },
        },
      },
    });

    return users;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   */
  private async sendNotifications(organization: any, lowStockProducts: any[], users: any[]) {
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const productList = lowStockProducts
      .map((product) => {
        const formatNumber = (value: number) => {
          if (Number.isInteger(value)) {
            return value.toString();
          }
          return Number(value.toFixed(2)).toString();
        };
        return `‚Ä¢ ${product.name}: ${formatNumber(product.quantity)} ${product.unit || '–µ–¥'} (–º–∏–Ω–∏–º—É–º: ${formatNumber(product.minThreshold)} ${product.unit || '–µ–¥'})`;
      })
      .join('\n');

    const message = `‚ö†Ô∏è **${organization.name}**\n\n–ù–∞ —Å–∫–ª–∞–¥–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã:\n\n${productList}`;

    // –ü–æ–ª—É—á–∞–µ–º URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const webappUrl =
      this.notificationService.config.get<string>('WEBAPP_URL') ||
      'https://big-grain-tg.vercel.app';

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for (const user of users) {
      try {
        await this.notificationService.sendMessage(user.telegramId, message, {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [[{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webappUrl } }]],
          },
        });

        this.logger.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}`);
      } catch (error) {
        this.logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}:`, error);
      }
    }
  }
}
