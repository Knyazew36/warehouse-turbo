import { Injectable, Logger } from '@nestjs/common'
import { PrismaService } from 'nestjs-prisma'
import { NotificationService } from '../bot/notification.service'
import { UserService } from '../user/user.service'
import { Organization, Role, User } from '@prisma/client'
import { OrganizationSettings } from 'src/organization/types/organization-settings.type'
import { Cron, CronExpression } from '@nestjs/schedule'

@Injectable()
export class CronService {
  private readonly logger = new Logger(CronService.name)

  constructor(
    private readonly prisma: PrismaService,
    private readonly notificationService: NotificationService,
    private readonly userService: UserService
  ) {}

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  @Cron(CronExpression.EVERY_MINUTE)
  async checkLowStockAndNotify() {
    const startTime = Date.now()
    this.logger.log('üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ')

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
      const organizations = await this.prisma.organization.findMany({
        where: { active: true }
      })

      let processedOrganizations = 0
      let totalNotificationsSent = 0

      for (const organization of organizations) {
        this.logger.log(`üè¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: ${organization.name} (ID: ${organization.id})`)
        const result = await this.processOrganizationNotifications(organization)
        if (result) {
          processedOrganizations++
          totalNotificationsSent += result.notificationsSent
        }
      }

      const executionTime = Date.now() - startTime
      this.logger.log(
        `‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${executionTime}ms. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: ${processedOrganizations}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${totalNotificationsSent}`
      )
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ:', error)
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  private async processOrganizationNotifications(
    organization: Organization
  ): Promise<{ notificationsSent: number } | null> {
    const startTime = Date.now()
    this.logger.log(`üè¢ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ ${organization.name} (ID: ${organization.id})`)

    try {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
      this.logger.log(`‚öôÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ ${organization.name}`)
      const notificationSettings = this.getNotificationSettings(
        organization.settings as unknown as OrganizationSettings
      )
      this.logger.log(
        `üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: –≤—Ä–µ–º—è ${notificationSettings.notificationTime}, —Ä–æ–ª–∏ ${notificationSettings.notificationRoles.join(', ')}`
      )

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–π—á–∞—Å
      const shouldSend = this.shouldSendNotificationNow(
        notificationSettings?.notificationTime || '17:18'
      )
      this.logger.log(
        `‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${shouldSend ? '–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º' : '–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º'}`
      )

      if (!shouldSend) {
        this.logger.log(
          `‚è∞ –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ ${organization.name} - –Ω–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`
        )
        return null
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
      this.logger.log(`üì¶ –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ ${organization.name}`)
      const lowStockProducts = await this.getLowStockProducts(organization.id)
      this.logger.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${lowStockProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º`)

      if (lowStockProducts.length === 0) {
        this.logger.log(`‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è ${organization.name}: –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º`)
        return null
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º
      lowStockProducts.forEach(product => {
        this.logger.log(
          `üì¶ –¢–æ–≤–∞—Ä "${product.name}": –æ—Å—Ç–∞—Ç–æ–∫ ${product.quantity} ${product.unit || '–µ–¥'}, –º–∏–Ω–∏–º—É–º ${product.minThreshold} ${product.unit || '–µ–¥'}`
        )
      })

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      this.logger.log(`üë• –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ ${organization.name}`)
      const usersToNotify = await this.getUsersToNotify(
        organization.id,
        notificationSettings.notificationRoles || [Role.OWNER, Role.ADMIN]
      )
      this.logger.log(`üë• –ù–∞–π–¥–µ–Ω–æ ${usersToNotify.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`)

      console.info('usersToNotify', usersToNotify)
      if (usersToNotify.length === 0) {
        this.logger.log(`‚ö†Ô∏è –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è ${organization.name}: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`)
        return null
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      usersToNotify.forEach(user => {
        this.logger.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${user.telegramId} (—Ä–æ–ª—å: ${user})`)
      })

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      this.logger.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ ${organization.name}`)
      const notificationsSent = await this.sendNotifications(
        organization,
        lowStockProducts,
        usersToNotify
      )

      const executionTime = Date.now() - startTime
      this.logger.log(
        `‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è ${organization.name}: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${executionTime}ms, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${notificationsSent} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`
      )

      return { notificationsSent }
    } catch (error) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ ${organization.name}:`,
        error
      )
      return null
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ JSON –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  private getNotificationSettings(
    settings: OrganizationSettings
  ): OrganizationSettings['notifications'] {
    const defaultSettings: OrganizationSettings['notifications'] = {
      notificationTime: '09:00',
      notificationRoles: [Role.OWNER, Role.ADMIN]
    }

    if (!settings || !settings.notifications) {
      this.logger.log('‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
      return defaultSettings
    }

    this.logger.log('‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
    return {
      notificationTime: settings.notifications.notificationTime || defaultSettings.notificationTime,
      notificationRoles:
        settings.notifications.notificationRoles || defaultSettings.notificationRoles
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–π—á–∞—Å
   */
  private shouldSendNotificationNow(notificationTime: string): boolean {
    const now = new Date()
    const [hoursStr, minutesStr] = String(notificationTime || '').split(':')
    const targetHours = Number(hoursStr)
    const targetMinutes = Number(minutesStr ?? '0')

    this.logger.log(
      `‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${now.getHours()}:${now.getMinutes().toString().padStart(2, '0')}, —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è: ${targetHours}:${targetMinutes.toString().padStart(2, '0')}`
    )

    if (Number.isNaN(targetHours) || Number.isNaN(targetMinutes)) {
      this.logger.warn(`‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${notificationTime}`)
      return false
    }

    const shouldSend = now.getHours() === targetHours && now.getMinutes() === targetMinutes
    // const shouldSend = true
    this.logger.log(`‚è∞ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: ${shouldSend ? '–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º' : '–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º'}`)
    return shouldSend
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  private async getLowStockProducts(organizationId: number) {
    this.logger.log(`üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ ID: ${organizationId}`)

    const products = await this.prisma.product.findMany({
      where: {
        organizationId,
        active: true
      }
    })

    this.logger.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${products.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏`)

    // Prisma Decimal –Ω—É–∂–Ω–æ –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫ —á–∏—Å–ª—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const lowStockProducts = products.filter(
      product => Number(product.quantity) < Number(product.minThreshold)
    )

    this.logger.log(
      `üì¶ –¢–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º: ${lowStockProducts.length} –∏–∑ ${products.length}`
    )

    return lowStockProducts
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  private async getUsersToNotify(organizationId: number, roles: Role[]) {
    this.logger.log(
      `üë• –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ ID: ${organizationId} —Å —Ä–æ–ª—è–º–∏: ${roles.join(', ')}`
    )

    let users: User[] = []
    try {
      users = await this.prisma.user.findMany({
        where: {
          active: true,
          telegramId: { not: '' },
          userOrganizations: {
            some: {
              organizationId,
              role: { in: roles }
            }
          }
        },
        include: {
          userOrganizations: {
            where: { organizationId }
          }
        }
      })

      this.logger.log(`üë• –ù–∞–π–¥–µ–Ω–æ ${users.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram ID`)
    } catch (error) {
      console.error('error', error)
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:`, error)
      return []
    }

    return users
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   */
  private async sendNotifications(
    organization: any,
    lowStockProducts: any[],
    users: any[]
  ): Promise<number> {
    this.logger.log(`üì§ –ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ ${organization.name}`)

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const productList = lowStockProducts
      .map(product => {
        const toPlainNumberString = (raw: any) => {
          const n = Number(raw)
          if (Number.isNaN(n)) {
            return String(raw)
          }
          return Number.isInteger(n) ? String(n) : n.toFixed(2)
        }
        return `‚Ä¢ ${product.name}: ${toPlainNumberString(product.quantity)} ${product.unit || '–µ–¥'} (–º–∏–Ω–∏–º—É–º: ${toPlainNumberString(product.minThreshold)} ${product.unit || '–µ–¥'})`
      })
      .join('\n')

    const message = `‚ö†Ô∏è <b>${organization.name}</b>\n\n–ù–∞ —Å–∫–ª–∞–¥–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã:\n\n${productList}`
    this.logger.log(`üìù –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª–∏–Ω–æ–π ${message.length} —Å–∏–º–≤–æ–ª–æ–≤`)

    // –ü–æ–ª—É—á–∞–µ–º URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const webappUrl =
      this.notificationService.config.get<string>('WEBAPP_URL') ||
      'https://5278831-ad07030.twc1.net'

    this.logger.log(`üåê URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${webappUrl}`)

    let successfulNotifications = 0
    let failedNotifications = 0

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for (const user of users) {
      try {
        this.logger.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}`)

        await this.notificationService.sendMessage(user.telegramId, message, {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [[{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webappUrl } }]]
          }
        })

        this.logger.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}`)
        successfulNotifications++
      } catch (error) {
        this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}:`, error)
        failedNotifications++
      }
    }

    this.logger.log(
      `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: —É—Å–ø–µ—à–Ω–æ ${successfulNotifications}, –Ω–µ—É–¥–∞—á–Ω–æ ${failedNotifications}`
    )
    return successfulNotifications
  }
}
