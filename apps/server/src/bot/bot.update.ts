// src/bot/bot.update.ts
import { Update, Start, Command, Action, Ctx, On } from 'nestjs-telegraf';
import { Context } from 'telegraf';
import { ProductsService } from '../products/products.service';
import { PrismaService } from 'nestjs-prisma';
import { NotificationService } from './notification.service';
// import { BotService } from './bot.service';
import { AllowedPhoneService } from '../auth/allowed-phone.service';

@Update()
export class BotUpdate {
  constructor(
    private readonly productsService: ProductsService,
    private readonly prisma: PrismaService,
    private readonly notificationService: NotificationService,
    private readonly allowedPhoneService: AllowedPhoneService,
  ) {}

  @Start()
  async onStart(@Ctx() ctx: Context) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const telegramId = String(ctx.from.id);
    const user = await this.prisma.user.findUnique({
      where: { telegramId },
      include: { allowedPhones: true },
    });

    if (!user || user.allowedPhones.length === 0) {
      await ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.', {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üì± –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è',
                callback_data: 'request_phone',
              },
            ],
          ],
        },
      });
      return;
    }

    const webappUrl = process.env.WEBAPP_URL || 'https://big-grain-tg.vercel.app';

    await ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º.', {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
              web_app: { url: webappUrl },
            },
          ],
        ],
      },
    });
    return;
  }

  @Action('request_phone')
  async onRequestPhone(@Ctx() ctx: Context) {
    const isAuthorized = await this.checkAuthorization(ctx);
    if (isAuthorized) {
      await ctx.reply('–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!');
      return;
    }

    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:', {
      reply_markup: {
        keyboard: [
          [
            {
              text: 'üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä',
              request_contact: true,
            },
          ],
        ],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  }

  @Command('phone')
  async onPhoneCommand(@Ctx() ctx: Context) {
    await this.handleUnauthorizedMessage(ctx);
  }

  @On('text')
  async onTextMessage(@Ctx() ctx: Context) {
    await this.handleUnauthorizedMessage(ctx);
  }

  @On('photo')
  async onPhotoMessage(@Ctx() ctx: Context) {
    await this.handleUnauthorizedMessage(ctx);
  }

  @On('video')
  async onVideoMessage(@Ctx() ctx: Context) {
    await this.handleUnauthorizedMessage(ctx);
  }

  @On('document')
  async onDocumentMessage(@Ctx() ctx: Context) {
    await this.handleUnauthorizedMessage(ctx);
  }

  @On('audio')
  async onAudioMessage(@Ctx() ctx: Context) {
    await this.handleUnauthorizedMessage(ctx);
  }

  @On('voice')
  async onVoiceMessage(@Ctx() ctx: Context) {
    await this.handleUnauthorizedMessage(ctx);
  }

  @On('sticker')
  async onStickerMessage(@Ctx() ctx: Context) {
    await this.handleUnauthorizedMessage(ctx);
  }

  @On('animation')
  async onAnimationMessage(@Ctx() ctx: Context) {
    await this.handleUnauthorizedMessage(ctx);
  }

  @On('location')
  async onLocationMessage(@Ctx() ctx: Context) {
    await this.handleUnauthorizedMessage(ctx);
  }

  @On('contact')
  async onContact(@Ctx() ctx: Context) {
    const contact = (ctx.message as any).contact;
    if (!contact || !contact.phone_number) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.');
      return;
    }

    const phone = contact.phone_number.startsWith('+')
      ? contact.phone_number
      : `+${contact.phone_number}`;
    const telegramId = String(ctx.from.id);
    console.info('phone', phone);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à—ë–Ω –ª–∏ –Ω–æ–º–µ—Ä
    const allowed = await this.allowedPhoneService.isPhoneAllowed(phone);
    if (!allowed) {
      await ctx.reply(
        '‚ùå –í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.',
      );
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –Ω–æ–º–µ—Ä –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if (allowed.usedById) {
      const existingUser = await this.prisma.user.findUnique({
        where: { id: allowed.usedById },
      });
      if (existingUser && existingUser.telegramId !== telegramId) {
        await ctx.reply('‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.');
        return;
      }
    }

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const user = await this.prisma.user.upsert({
      where: { telegramId },
      update: {
        data: { ...contact },
        role: 'OPERATOR', // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å OPERATOR
      },
      create: {
        telegramId,
        data: { ...contact },
        role: 'OPERATOR', // –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç —Ä–æ–ª—å OPERATOR
      },
    });

    await this.allowedPhoneService.bindPhoneToUser(phone, user.id);

    const webappUrl = process.env.WEBAPP_URL || 'https://big-grain-tg.vercel.app';

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    try {
      await ctx.editMessageText('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.', {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                web_app: { url: webappUrl },
              },
            ],
          ],
        },
      });
    } catch (error) {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.reply('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.', {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                web_app: { url: webappUrl },
              },
            ],
          ],
        },
      });
    }
  }

  private async ensureUser(ctx: Context) {
    if (ctx.from?.id) {
      const tgId = String(ctx.from.id);
      const user = await this.prisma.user.upsert({
        where: { telegramId: tgId },
        update: {},
        create: { telegramId: tgId },
      });
      ctx.state.user = user;
    }
  }

  private async checkAuthorization(ctx: Context): Promise<boolean> {
    const telegramId = String(ctx.from.id);
    const user = await this.prisma.user.findUnique({
      where: { telegramId },
      include: { allowedPhones: true },
    });

    return user && user.allowedPhones.length > 0;
  }

  private async handleUnauthorizedMessage(ctx: Context) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const isAuthorized = await this.checkAuthorization(ctx);

    if (!isAuthorized) {
      await ctx.reply('üîê –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.', {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üì± –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è',
                callback_data: 'request_phone',
              },
            ],
          ],
        },
      });
      return;
    }

    const webappUrl = process.env.WEBAPP_URL || 'https://big-grain-tg.vercel.app';

    await ctx.reply('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.', {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
              web_app: { url: webappUrl },
            },
          ],
        ],
      },
    });
  }
}
