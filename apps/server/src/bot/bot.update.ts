import { Update, Start, Command, Action, Ctx, On } from 'nestjs-telegraf'
import { Context } from 'telegraf'
import { PrismaService } from 'nestjs-prisma'
import { BotService } from './bot.service'
import { Role } from '@prisma/client'

@Update()
export class BotUpdate {
  private waitingForNotificationText = new Map<string, boolean>()

  constructor(
    private readonly prisma: PrismaService,
    private readonly botService: BotService
  ) {}

  @Start()
  async onStart(@Ctx() ctx: Context) {
    const webappUrl = process.env.WEBAPP_URL

    await ctx.reply(
      `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º!

üì¶ **–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–æ–º –∑–∞–ø–∞—Å–µ
‚Ä¢ –ü—Ä–∏—Ö–æ–¥ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º 
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ 

üõ† **–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã:**
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–æ–º –∑–∞–ø–∞—Å–µ
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

üíº **–î–ª—è –∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç:**
–°–∫–ª–∞–¥—Å–∫–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏, –º–µ–Ω–µ–¥–∂–µ—Ä—ã, –≤–ª–∞–¥–µ–ª—å—Ü—ã –±–∏–∑–Ω–µ—Å–∞

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                web_app: { url: webappUrl }
              }
            ]
          ]
        }
      }
    )
    return
  }

  @Action('request_phone')
  async onRequestPhone(@Ctx() ctx: Context) {
    const isAuthorized = await this.checkAuthorization(ctx)
    if (isAuthorized) {
      await ctx.reply('–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!')
      return
    }

    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:', {
      reply_markup: {
        keyboard: [
          [
            {
              text: 'üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä',
              request_contact: true
            }
          ]
        ],
        resize_keyboard: true,
        one_time_keyboard: true
      }
    })
  }

  // @Command('phone')
  // async onPhoneCommand(@Ctx() ctx: Context) {
  //   await this.handleUnauthorizedMessage(ctx)
  // }

  @On('text')
  async onTextMessage(@Ctx() ctx: Context) {
    console.log('onTextMessage', ctx.message)

    const telegramId = String(ctx.from.id)
    const messageText = (ctx.message as any).text

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã —Ç–µ–∫—Å—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (this.waitingForNotificationText.has(telegramId)) {
      if (messageText === '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É') {
        this.clearNotificationState(telegramId)
        await ctx.reply('‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', {
          reply_markup: { remove_keyboard: true }
        })
        return
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
      try {
        const result = await this.botService.sendUpdateNotification(messageText)

        await ctx.reply(
          `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\nüìù –¢–µ–∫—Å—Ç: "${messageText}"\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.totalUsers}\n‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${result.sentSuccessfully}\n‚Ä¢ –û—à–∏–±–æ–∫: ${result.failed}`,
          {
            reply_markup: { remove_keyboard: true }
          }
        )

        // –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        this.clearNotificationState(telegramId)
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error)
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.', {
          reply_markup: { remove_keyboard: true }
        })
        this.clearNotificationState(telegramId)
      }
      return
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    // await this.handleUnauthorizedMessage(ctx)
  }

  // @On('photo')
  // async onPhotoMessage(@Ctx() ctx: Context) {
  //   await this.handleUnauthorizedMessage(ctx)
  // }

  // @On('video')
  // async onVideoMessage(@Ctx() ctx: Context) {
  //   await this.handleUnauthorizedMessage(ctx)
  // }

  // @On('document')
  // async onDocumentMessage(@Ctx() ctx: Context) {
  //   await this.handleUnauthorizedMessage(ctx)
  // }

  // @On('audio')
  // async onAudioMessage(@Ctx() ctx: Context) {
  //   await this.handleUnauthorizedMessage(ctx)
  // }

  // @On('voice')
  // async onVoiceMessage(@Ctx() ctx: Context) {
  //   await this.handleUnauthorizedMessage(ctx)
  // }

  // @On('sticker')
  // async onStickerMessage(@Ctx() ctx: Context) {
  //   await this.handleUnauthorizedMessage(ctx)
  // }

  // @On('animation')
  // async onAnimationMessage(@Ctx() ctx: Context) {
  //   await this.handleUnauthorizedMessage(ctx)
  // }

  // @On('location')
  // async onLocationMessage(@Ctx() ctx: Context) {
  //   await this.handleUnauthorizedMessage(ctx)
  // }

  @On('contact')
  async onContact(@Ctx() ctx: Context) {
    const contact = (ctx.message as any).contact
    if (!contact || !contact.phone_number) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')
      return
    }

    const phone = contact.phone_number.startsWith('+')
      ? contact.phone_number
      : `+${contact.phone_number}`
    const telegramId = String(ctx.from.id)
    console.info('phone', phone)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
    const existingUserByPhone = await this.prisma.user.findUnique({
      where: { phone }
    })

    if (existingUserByPhone) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (existingUserByPhone.telegramId === telegramId) {
        // –≠—Ç–æ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await this.prisma.user.update({
          where: { id: existingUserByPhone.id },
          data: { data: { ...contact } }
        })
      } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —Å –¥—Ä—É–≥–∏–º telegramId
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è—è telegramId
        await this.prisma.user.update({
          where: { id: existingUserByPhone.id },
          data: {
            telegramId,
            data: { ...contact }
          }
        })
      }
    } else {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
      await this.prisma.user.create({
        data: {
          telegramId,
          data: { ...contact },
          phone
        }
      })
    }

    const webappUrl = process.env.WEBAPP_URL || 'https://big-grain-tg.vercel.app'

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    try {
      await ctx.editMessageText('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.', {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                web_app: { url: webappUrl }
              }
            ]
          ]
        }
      })
    } catch (error) {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.reply('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.', {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                web_app: { url: webappUrl }
              }
            ]
          ]
        }
      })
    }
  }

  @Command('notify')
  async onNotifyUpdate(@Ctx() ctx: Context) {
    const isAuthorized = await this.checkAuthorization(ctx)
    if (!isAuthorized) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')
      return
    }

    const hasITRole = await this.checkITRole(ctx)
    if (!hasITRole) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.')
      return
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const telegramId = String(ctx.from.id)
    this.waitingForNotificationText.set(telegramId, true)

    await ctx.reply(
      'üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ "–£ –Ω–∞—Å –≤—ã—à–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!"\n‚Ä¢ "–ü–ª–∞–Ω–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã 15.01 —Å 2:00 –¥–æ 4:00"\n‚Ä¢ "–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ –≤ Excel"',
      {
        reply_markup: {
          keyboard: [
            [
              {
                text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É'
              }
            ]
          ],
          resize_keyboard: true,
          one_time_keyboard: true
        }
      }
    )
  }

  private async checkAuthorization(ctx: Context): Promise<boolean> {
    const telegramId = String(ctx.from.id)
    const user = await this.prisma.user.findUnique({
      where: { telegramId },
      select: { id: true, phone: true }
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω
    return !!user && !!user.phone
  }

  private async checkITRole(ctx: Context): Promise<boolean> {
    const telegramId = String(ctx.from.id)

    const user = await this.prisma.user.findUnique({
      where: { telegramId },
      include: {
        userOrganizations: {
          include: {
            organization: true
          }
        }
      }
    })

    if (!user) return false

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª—å IT –≤ –ª—é–±–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    return user.userOrganizations.some(uo => uo.role === Role.IT)
  }

  private clearNotificationState(telegramId: string) {
    this.waitingForNotificationText.delete(telegramId)
  }
}
