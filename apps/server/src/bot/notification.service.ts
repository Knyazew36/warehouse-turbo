import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { InjectBot } from 'nestjs-telegraf';
import { Telegraf, Context as TelegrafContext } from 'telegraf';
import { PrismaService } from 'nestjs-prisma';

@Injectable()
export class NotificationService {
  constructor(
    @InjectBot() private readonly bot: Telegraf<TelegrafContext>,
    public readonly config: ConfigService,
    private readonly prisma: PrismaService,
  ) {}

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendMessage(telegramId: string, message: string, extra?: any) {
    try {
      return await this.bot.telegram.sendMessage(telegramId, message, extra);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}:`, error);
      throw error;
    }
  }

  /**
   * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–æ—Ç–µ
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
   */
  async notifyAccessRequestDeclined(telegramId: string, adminNote?: string) {
    const message = `‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞${adminNote ? `\n\n–ü—Ä–∏—á–∏–Ω–∞: ${adminNote}` : ''}`;
    return this.sendMessage(telegramId, message);
  }

  /**
   * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–æ—Ç–µ
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π webapp
   */
  async notifyAccessRequestApproved(telegramId: string, adminNote?: string) {
    const webappUrl = this.config.get<string>('WEBAPP_URL') || 'https://big-grain-tg.vercel.app';
    const message = `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!${adminNote ? `\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${adminNote}` : ''}`;

    return this.sendMessage(telegramId, message, {
      reply_markup: {
        inline_keyboard: [[{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: webappUrl } }]],
      },
    });
  }

  /**
   * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–æ—Ç–µ
   * –£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö OWNER'–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –Ω–∞ –¥–æ—Å—Ç—É–ø
   */
  async notifyOwnersAccessRequest(user: any, requestId: number) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é OWNER
      const owners = await this.prisma.user.findMany({
        where: { role: 'OWNER', active: true },
      });

      if (owners.length === 0) {
        console.warn('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é OWNER –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
      const request = await this.prisma.accessRequest.findUnique({
        where: { id: requestId },
      });

      const userData = user.data as any;
      const message = `üö™ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n–ò–º—è: ${userData?.first_name || ''} ${userData?.last_name || ''}\nUsername: @${userData?.username || ''}\nTelegram ID: ${user.telegramId}\n\nüìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${request?.message || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\nüÜî ID –∑–∞—è–≤–∫–∏: ${requestId}`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É OWNER'—É
      for (const owner of owners) {
        try {
          await this.bot.telegram.sendMessage(owner.telegramId, message, {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å',
                    callback_data: `approve_access:${user.telegramId}:${requestId}`,
                  },
                  {
                    text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
                    callback_data: `decline_access:${user.telegramId}:${requestId}`,
                  },
                ],
              ],
            },
          });
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è OWNER'—É ${owner.telegramId}:`, error);
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ OWNER'–æ–≤ –æ –∑–∞—è–≤–∫–µ –Ω–∞ –¥–æ—Å—Ç—É–ø:", error);
    }
  }
}
