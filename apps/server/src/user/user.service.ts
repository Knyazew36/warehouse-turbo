import { Injectable, NotFoundException, BadRequestException } from '@nestjs/common'
import { PrismaService } from 'nestjs-prisma'
import { User, Role } from '@prisma/client'
import { GetUsersDto } from './dto/get-users.dto'
import { UpdateUserDto } from './dto/update-user.dto'

@Injectable()
export class UserService {
  constructor(private readonly prisma: PrismaService) {
    console.log('üü¢ UsersService —Å–æ–∑–¥–∞–Ω', new Date().toISOString())
  }

  async findAll(query: GetUsersDto = {}, organizationId?: number): Promise<User[]> {
    const { onlyEmployees, includeDeleted } = query

    let whereClause: any = {}

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω organizationId, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    if (organizationId) {
      whereClause.userOrganizations = {
        some: {
          organizationId: organizationId
        }
      }
    }

    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–æ–ª—è–º OPERATOR –∏ ADMIN
    if (onlyEmployees) {
      if (organizationId) {
        whereClause.userOrganizations.some.role = {
          not: [Role.GUEST, Role.BLOCKED]
        }
      } else {
        whereClause.userOrganizations = {
          some: {
            role: {
              not: [Role.GUEST, Role.BLOCKED]
            }
          }
        }
      }
    }

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (!includeDeleted) {
      whereClause.active = true
    }

    return this.prisma.user.findMany({
      where: whereClause,
      orderBy: { createdAt: 'desc' },
      include: organizationId
        ? {
            userOrganizations: {
              where: { organizationId }
            }
          }
        : undefined
    })
  }

  async findOne(id: number): Promise<User> {
    const user = await this.prisma.user.findUnique({ where: { id } })
    if (!user) {
      throw new NotFoundException(`User #${id} not found`)
    }
    return user
  }

  async findByTelegramId(telegramId: string): Promise<User | null> {
    return this.prisma.user.findUnique({ where: { telegramId } })
  }

  async update(id: number, dto: UpdateUserDto): Promise<User> {
    await this.findOne(id)
    return this.prisma.user.update({
      where: { id },
      data: dto
    })
  }

  async remove(id: number): Promise<User> {
    const user = await this.findOne(id)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ª–∏ —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–∏—Å—Ç–µ–º—ã
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const userOrganizations = await this.prisma.userOrganization.findMany({
      where: { userId: id }
    })

    const isOwner = userOrganizations.some(uo => uo.role === Role.OWNER)
    if (isOwner) {
      throw new BadRequestException('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–∏—Å—Ç–µ–º—ã')
    }

    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    return await this.prisma.$transaction(async prisma => {
      // 1. –û—Ç–≤—è–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await prisma.allowedPhone.updateMany({
        where: { usedById: id },
        data: { usedById: null }
      })

      // 2. –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await prisma.accessRequest.updateMany({
        where: {
          userId: id,
          status: 'PENDING'
        },
        data: {
          status: 'DECLINED',
          adminNote: '–û—Ç–º–µ–Ω–µ–Ω–æ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
          processedAt: new Date()
        }
      })

      // 3. –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await prisma.reminder.updateMany({
        where: { userId: id },
        data: { enabled: false }
      })

      // 4. –£–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      await prisma.notificationSetting.deleteMany({
        where: { userId: id }
      })

      // 5. –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ
      const deletedUser = await prisma.user.update({
        where: { id },
        data: {
          active: false,
          telegramId: `deleted_${user.telegramId}_${Date.now()}` // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        }
      })

      return deletedUser
    })
  }

  /**
   * –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∂–µ—Å—Ç–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
   * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async hardRemove(id: number): Promise<void> {
    const user = await this.findOne(id)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ª–∏ —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–∏—Å—Ç–µ–º—ã
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const userOrganizations = await this.prisma.userOrganization.findMany({
      where: { userId: id }
    })

    const isOwner = userOrganizations.some(uo => uo.role === Role.OWNER)
    if (isOwner) {
      throw new BadRequestException('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–∏—Å—Ç–µ–º—ã')
    }

    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    await this.prisma.$transaction(async prisma => {
      // 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await prisma.notificationLog.deleteMany({ where: { userId: id } })
      await prisma.reminder.deleteMany({ where: { userId: id } })
      await prisma.accessRequest.deleteMany({ where: { userId: id } })
      await prisma.accessRequest.deleteMany({ where: { processedById: id } })
      await prisma.shiftReport.deleteMany({ where: { userId: id } })
      await prisma.receipt.deleteMany({ where: { operatorId: id } })

      // 2. –û—Ç–≤—è–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
      await prisma.allowedPhone.updateMany({
        where: { usedById: id },
        data: { usedById: null }
      })

      // 3. –£–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      await prisma.notificationSetting.deleteMany({ where: { userId: id } })

      // 4. –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await prisma.user.delete({ where: { id } })
    })
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async restore(id: number): Promise<User> {
    const user = await this.prisma.user.findUnique({ where: { id } })
    if (!user) {
      throw new NotFoundException(`User #${id} not found`)
    }

    if (user.active) {
      throw new BadRequestException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω')
    }

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return this.prisma.user.update({
      where: { id },
      data: {
        active: true,
        telegramId: user.telegramId.replace(/^deleted_.*_/, '') // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π telegramId
      }
    })
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  async getDeletedUsers(organizationId?: number): Promise<User[]> {
    let whereClause: any = { active: false }

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω organizationId, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    if (organizationId) {
      whereClause.userOrganizations = {
        some: {
          organizationId: organizationId
        }
      }
    }

    return this.prisma.user.findMany({
      where: whereClause,
      orderBy: { updatedAt: 'desc' },
      include: organizationId
        ? {
            userOrganizations: {
              where: { organizationId }
            }
          }
        : undefined
    })
  }

  async getEmployees(organizationId?: number): Promise<User[]> {
    let whereClause: any = {}

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω organizationId, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ —Ä–æ–ª—è–º
    if (organizationId) {
      whereClause.userOrganizations = {
        some: {
          organizationId: organizationId,
          role: {
            in: [Role.OPERATOR, Role.ADMIN, Role.OWNER]
          }
        }
      }
    }

    const users = await this.prisma.user.findMany({
      where: whereClause,
      orderBy: { createdAt: 'desc' },
      include: organizationId
        ? {
            userOrganizations: {
              where: { organizationId }
            }
          }
        : undefined
    })

    return users.map(user => ({
      ...user,
      role: user.userOrganizations.find(uo => uo.organizationId === organizationId)?.role || null
    }))
  }

  async getUsersByRole(role: Role, organizationId?: number): Promise<User[]> {
    let whereClause: any = {
      userOrganizations: {
        some: {
          role: role
        }
      }
    }

    if (organizationId) {
      whereClause.userOrganizations.some.organizationId = organizationId
    }

    return this.prisma.user.findMany({
      where: whereClause,
      orderBy: { createdAt: 'desc' },
      include: {
        userOrganizations: {
          where: organizationId ? { organizationId } : undefined
        }
      }
    })
  }

  async getUserRole(telegramId: string, organizationId: number): Promise<{ role: Role }> {
    const user = await this.prisma.user.findUnique({
      where: { telegramId },
      select: { id: true }
    })

    console.log('user getUserRole', user)
    if (!user) {
      throw new NotFoundException(`User #${telegramId} not found`)
    }

    const userOrganization = await this.prisma.userOrganization.findFirst({
      where: { userId: user.id, organizationId }
    })

    if (!userOrganization) {
      throw new NotFoundException(`User #${telegramId} not found in organization #${organizationId}`)
    }

    return { role: userOrganization.role }
  }
}
